<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>C# 笔记：反射</title>
      <link href="2020/11/21/C-Reflection/"/>
      <url>2020/11/21/C-Reflection/</url>
      
        <content type="html"><![CDATA[<h2 id="简介："><a href="#简介：" class="headerlink" title="简介："></a>简介：</h2><p>　　顾名思义，是记录 反射(Reflection) 用法的 C# 笔记~<br>　　反射在《C# 程序设计教程（第3版）》中位于「5.7 属性」一节。</p><h2 id="引用书中定义如下："><a href="#引用书中定义如下：" class="headerlink" title="引用书中定义如下："></a>引用书中定义如下：</h2><blockquote><c style="color: #07e4c9;">　　反射(Reflection)是 .NET 中重要的机制，通过反射可以在运行时获得 .NET 中每一个类型（包括类、结构、委托、接口、枚举等）的成员，包括方法、属性、事件、和构造函数等，还可以获得每个成员的名称、限定符和参数等。有了反射，编程人员即可对每一个类型了如指掌。如果获得了构造函数的信息，可以直接创建对象，即使这个对象的类型在编译时还不知道。</c></blockquote><a id="more"></a><h2 id="说明："><a href="#说明：" class="headerlink" title="说明："></a>说明：</h2><p>　　要用反射，记得要调用<code>System.Reflection</code>！<br>　　反射有两种，透过名字，和透过程序集(.dll)。<br>　　·Type：项目<br>　　　　获取：（透过名字，只有一个）<br>　　　　　　　<code>Type &lt;项目变量名&gt; = &lt;项目变量名&gt;.GetType(&lt;想反射项目的名字，如&quot;System.Int32&quot;&gt;)</code><br>　　　　　　　（透过程序集，一或多个）<br>　　　　　　　<code>Type[] &lt;项目数组名&gt; = &lt;程序集变量名&gt;.GetTypes();</code><br>　　·Assembly：程序集，如果要放射.dll，要先赋值 Assembly，再获取 Type。<br>　　　　获取：<code>Assembly &lt;程序集变量名&gt; = Assembly.LoadFrom(&lt;.dll档位址&gt;);</code><br>　　·MemberInfo：项目成员<br>　　　　获取：（指定一个）<br>　　　　　　　<code>MemberInfo &lt;成员变量名&gt; = &lt;项目变量名&gt;.GetMember(&lt;成员名&gt;);</code><br>　　　　　　　（全部）<br>　　　　　　　<code>MemberInfo[] &lt;成员数组名&gt; = &lt;项目变量名&gt;.GetMembers();</code><br>　　·MethodInfo：项目方法<br>　　　　获取：（指定一个）<br>　　　　　　　<code>MethodInfo &lt;方法变量名&gt; = &lt;项目变量名&gt;.GetMethod(&lt;方法名&gt;);</code><br>　　　　　　　（全部）<br>　　　　　　　<code>MethodInfo[] &lt;方法数组名&gt; = &lt;项目变量名&gt;.GetMethods();</code><br>　　·FieldInfo：项目字段<br>　　　　获取：（指定一个）<br>　　　　　　　<code>FieldInfo &lt;字段变量名&gt; = &lt;项目变量名&gt;.GetField(&lt;字段名&gt;);</code><br>　　　　　　　（全部）　　<br>　　　　　　　<code>FieldInfo[] &lt;字段数组名&gt; = &lt;项目变量名&gt;.GetFields();</code><br>　　·ConstructorInfo：项目构造函数<br>　　　　获取：（指定一个）<br>　　　　　　　<code>ConstructorInfo &lt;构造函数变量名&gt; = &lt;项目变量名&gt;.GetConstructor(&lt;构造函数名&gt;);</code><br>　　　　　　　（全部）　　<br>　　　　　　　<code>ConstructorInfo[] &lt;构造函数数组名&gt; = &lt;项目变量名&gt;.GetConstructors();</code><br>　　·PropertyInfo：项目属性<br>　　　　获取：（指定一个）<br>　　　　　　　<code>PropertyInfo &lt;属性变量名&gt; = &lt;项目变量名&gt;.GetProperty(&lt;属性名&gt;);</code><br>　　　　　　　（全部）　　<br>　　　　　　　<code>PropertyInfo[] &lt;属性数组名&gt; = &lt;项目变量名&gt;.GetPropertys();</code><br>　　·EventInfo：项目事件<br>　　　　获取：（指定一个）<br>　　　　　　　<code>EventInfo &lt;事件变量名&gt; = &lt;项目变量名&gt;.GetEvent(&lt;事件名&gt;);</code><br>　　　　　　　（全部）　　<br>　　　　　　　<code>EventInfo[] &lt;事件数组名&gt; = &lt;项目变量名&gt;.GetEvents();</code><br>　　·ParameterInfo：<strong>方法</strong>参数<br>　　　　获取：（全部）　　<br>　　　　　　　<code>ParameterInfo[] &lt;参数数组名&gt; = &lt;方法变量名&gt;.GetParameters();</code> </p><h2 id="实例："><a href="#实例：" class="headerlink" title="实例："></a>实例：</h2><h3 id="using"><a href="#using" class="headerlink" title="using"></a>using</h3><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">using</span> <span class="token namespace">System</span><span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Reflection</span><span class="token punctuation">;</span> <span class="token comment">//别忘了加</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="class-HB-Reflection-普通反射"><a href="#class-HB-Reflection-普通反射" class="headerlink" title="class HB_Reflection { } 普通反射"></a>class HB_Reflection { } 普通反射</h3><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">class</span> <span class="token class-name">HB_Reflection</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">protected</span> <span class="token class-name"><span class="token keyword">string</span></span> Classname<span class="token punctuation">;</span> <span class="token comment">//项目名称</span>    <span class="token keyword">protected</span> <span class="token class-name">Type</span> Type<span class="token punctuation">;</span> <span class="token comment">//项目</span>    <span class="token keyword">protected</span> <span class="token return-type class-name">MemberInfo<span class="token punctuation">[</span><span class="token punctuation">]</span></span> Mmi <span class="token punctuation">&#123;</span> <span class="token comment">//项目的成员数组</span>        <span class="token keyword">get</span> <span class="token punctuation">&#123;</span> <span class="token comment">//这里就运用了属性</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>Type <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>            <span class="token keyword">else</span> <span class="token keyword">return</span> Type<span class="token punctuation">.</span><span class="token function">GetMembers</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//获取项目的成员</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">protected</span> <span class="token return-type class-name">MethodInfo<span class="token punctuation">[</span><span class="token punctuation">]</span></span> Mti <span class="token punctuation">&#123;</span> <span class="token comment">//项目的方法数组</span>        <span class="token keyword">get</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>Type <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>            <span class="token keyword">else</span> <span class="token keyword">return</span> Type<span class="token punctuation">.</span><span class="token function">GetMethods</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">protected</span> <span class="token return-type class-name">FieldInfo<span class="token punctuation">[</span><span class="token punctuation">]</span></span> Fi <span class="token punctuation">&#123;</span> <span class="token comment">//项目的字段数组，即常量</span>        <span class="token keyword">get</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>Type <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>            <span class="token keyword">else</span> <span class="token keyword">return</span> Type<span class="token punctuation">.</span><span class="token function">GetFields</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">protected</span> <span class="token return-type class-name">ConstructorInfo<span class="token punctuation">[</span><span class="token punctuation">]</span></span> Ci <span class="token punctuation">&#123;</span> <span class="token comment">//项目的构造函数数组</span>        <span class="token keyword">get</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>Type <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>            <span class="token keyword">else</span> <span class="token keyword">return</span> Type<span class="token punctuation">.</span><span class="token function">GetConstructors</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">protected</span> <span class="token return-type class-name">PropertyInfo<span class="token punctuation">[</span><span class="token punctuation">]</span></span> Pi <span class="token punctuation">&#123;</span> <span class="token comment">//不是3.14蛤，是项目的属性数组</span>        <span class="token keyword">get</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>Type <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>            <span class="token keyword">else</span> <span class="token keyword">return</span> Type<span class="token punctuation">.</span><span class="token function">GetProperties</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">protected</span> <span class="token return-type class-name">EventInfo<span class="token punctuation">[</span><span class="token punctuation">]</span></span> Ei <span class="token punctuation">&#123;</span> <span class="token comment">//项目的事件数组</span>        <span class="token keyword">get</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>Type <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>            <span class="token keyword">else</span> <span class="token keyword">return</span> Type<span class="token punctuation">.</span><span class="token function">GetEvents</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token function">Reflection</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span></span> name<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token comment">//构造函数</span>        Classname <span class="token operator">=</span> name<span class="token punctuation">;</span>        Type <span class="token operator">=</span> Type<span class="token punctuation">.</span><span class="token function">GetType</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">protected</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Show</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token comment">//显示反射结果</span>        <span class="token comment">//如果Type == null，就是反射错误了。</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>Type <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"「&#123;0&#125;」：反射错误！"</span><span class="token punctuation">,</span> Classname<span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"「&#123;0&#125;」类共有 &#123;1&#125; 个「成员」"</span><span class="token punctuation">,</span> Classname<span class="token punctuation">,</span> Mmi<span class="token punctuation">.</span>Length<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>Mti<span class="token punctuation">.</span>Length <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"  共 &#123;0&#125; 个「方法」，列表如下："</span><span class="token punctuation">,</span> Mti<span class="token punctuation">.</span>Length<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token class-name">MethodInfo</span> item <span class="token keyword">in</span> Mti<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    Console<span class="token punctuation">.</span><span class="token function">Write</span><span class="token punctuation">(</span><span class="token string">"    -&#123;0&#125;"</span><span class="token punctuation">,</span> item<span class="token punctuation">.</span>Name<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token class-name">ParameterInfo<span class="token punctuation">[</span><span class="token punctuation">]</span></span> PaI <span class="token operator">=</span> item<span class="token punctuation">.</span><span class="token function">GetParameters</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//方法要多少参数</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>PaI<span class="token punctuation">.</span><span class="token function">GetLength</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                        Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"，需要 &#123;0&#125; 个参数"</span><span class="token punctuation">,</span> PaI<span class="token punctuation">.</span><span class="token function">GetLength</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token class-name">ParameterInfo</span> pai <span class="token keyword">in</span> PaI<span class="token punctuation">)</span> Console<span class="token punctuation">.</span><span class="token function">Write</span><span class="token punctuation">(</span><span class="token string">"\t&#123;0&#125; &#123;1&#125;"</span><span class="token punctuation">,</span> pai<span class="token punctuation">.</span>ParameterType<span class="token punctuation">,</span> pai<span class="token punctuation">.</span>Name<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">&#125;</span>                    Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>Fi<span class="token punctuation">.</span>Length <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"  共 &#123;0&#125; 个「字段」，列表如下："</span><span class="token punctuation">,</span> Fi<span class="token punctuation">.</span>Length<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token class-name">FieldInfo</span> item <span class="token keyword">in</span> Fi<span class="token punctuation">)</span> Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"    -&#123;0&#125;"</span><span class="token punctuation">,</span> item<span class="token punctuation">.</span>Name<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>Ci<span class="token punctuation">.</span>Length <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"  共 &#123;0&#125; 个「析构函数」，列表如下："</span><span class="token punctuation">,</span> Ci<span class="token punctuation">.</span>Length<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token class-name">ConstructorInfo</span> item <span class="token keyword">in</span> Ci<span class="token punctuation">)</span> Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"    -&#123;0&#125;"</span><span class="token punctuation">,</span> item<span class="token punctuation">.</span>Name<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>Pi<span class="token punctuation">.</span>Length <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"  共 &#123;0&#125; 个「属性」，列表如下："</span><span class="token punctuation">,</span> Pi<span class="token punctuation">.</span>Length<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token class-name">PropertyInfo</span> item <span class="token keyword">in</span> Pi<span class="token punctuation">)</span> Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"    -&#123;0&#125;"</span><span class="token punctuation">,</span> item<span class="token punctuation">.</span>Name<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>Ei<span class="token punctuation">.</span>Length <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"  共 &#123;0&#125; 个「事件」，列表如下："</span><span class="token punctuation">,</span> Ei<span class="token punctuation">.</span>Length<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token class-name">EventInfo</span> item <span class="token keyword">in</span> Ei<span class="token punctuation">)</span> Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"    -&#123;0&#125;"</span><span class="token punctuation">,</span> item<span class="token punctuation">.</span>Name<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">virtual</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Display</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">Show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">virtual</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Display</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span></span> page<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">Show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Reflection-dll-程序集-dll-反射"><a href="#Reflection-dll-程序集-dll-反射" class="headerlink" title="Reflection_dll { } 程序集(.dll)反射"></a>Reflection_dll { } 程序集(.dll)反射</h3><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">class</span> <span class="token class-name">Reflection_dll</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">Reflection</span></span> <span class="token punctuation">&#123;</span>     <span class="token keyword">public</span> <span class="token class-name">Assembly</span> assembly<span class="token punctuation">;</span> <span class="token comment">//加载程序集</span>    <span class="token keyword">public</span> <span class="token class-name">Type<span class="token punctuation">[</span><span class="token punctuation">]</span></span> types<span class="token punctuation">;</span> <span class="token comment">//项目数组</span>    <span class="token keyword">private</span> <span class="token class-name"><span class="token keyword">int</span></span> pages<span class="token punctuation">;</span> <span class="token comment">//每10个项目为1页，分开显示。</span>    <span class="token keyword">public</span> <span class="token function">Reflection_dll</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span></span> name<span class="token punctuation">)</span> <span class="token punctuation">:</span> <span class="token keyword">base</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        assembly <span class="token operator">=</span> Assembly<span class="token punctuation">.</span><span class="token function">LoadFrom</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>        types <span class="token operator">=</span> assembly<span class="token punctuation">.</span><span class="token function">GetTypes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        pages <span class="token operator">=</span> types<span class="token punctuation">.</span><span class="token function">GetLength</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">10</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">override</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Display</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token comment">//显示</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>pages <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"「&#123;0&#125;」包含的 &#123;1&#125; 个项目名如下："</span><span class="token punctuation">,</span> assembly<span class="token punctuation">.</span><span class="token function">GetName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>Name <span class="token operator">+</span> <span class="token string">".dll"</span><span class="token punctuation">,</span> types<span class="token punctuation">.</span><span class="token function">GetLength</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span></span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> types<span class="token punctuation">.</span><span class="token function">GetLength</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                Console<span class="token punctuation">.</span><span class="token function">Write</span><span class="token punctuation">(</span><span class="token string">"(&#123;0&#125;)"</span><span class="token punctuation">,</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                Classname <span class="token operator">=</span> types<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>FullName<span class="token punctuation">;</span>                Type <span class="token operator">=</span> types<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>                <span class="token function">Show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"「&#123;0&#125;」共包含 &#123;1&#125; 个项目，每 10 个为 1 页，分成 &#123;2&#125; 页\n「&#123;0&#125;」的第 1 页项目名如下："</span><span class="token punctuation">,</span> assembly<span class="token punctuation">.</span><span class="token function">GetName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>Name<span class="token punctuation">,</span> types<span class="token punctuation">.</span><span class="token function">GetLength</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span> pages<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span></span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                Console<span class="token punctuation">.</span><span class="token function">Write</span><span class="token punctuation">(</span><span class="token string">"(&#123;0&#125;)"</span><span class="token punctuation">,</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                Classname <span class="token operator">=</span> types<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>FullName<span class="token punctuation">;</span>                Type <span class="token operator">=</span> types<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>                <span class="token function">Show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">override</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Display</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span></span> page<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token comment">//显示指定页数</span>        <span class="token class-name"><span class="token keyword">int</span></span> start <span class="token operator">=</span> <span class="token punctuation">(</span>page <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">10</span><span class="token punctuation">;</span>        Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"「&#123;0&#125;」的第 &#123;1&#125; 页项目名如下："</span><span class="token punctuation">,</span> assembly<span class="token punctuation">.</span><span class="token function">GetName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>Name<span class="token punctuation">,</span> page<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span></span> i <span class="token operator">=</span> start<span class="token punctuation">;</span> i <span class="token operator">&lt;</span> start <span class="token operator">+</span> <span class="token number">10</span> <span class="token operator">&amp;&amp;</span> i <span class="token operator">&lt;</span> types<span class="token punctuation">.</span><span class="token function">GetLength</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            Console<span class="token punctuation">.</span><span class="token function">Write</span><span class="token punctuation">(</span><span class="token string">"(&#123;0&#125;)"</span><span class="token punctuation">,</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            Classname <span class="token operator">=</span> types<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>FullName<span class="token punctuation">;</span>            Type <span class="token operator">=</span> types<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token function">Show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="main调用（反射程序集）"><a href="#main调用（反射程序集）" class="headerlink" title="main调用（反射程序集）"></a>main调用（反射程序集）</h3><p>程序集是从vs的输出窗口来的，表示任何正常的 .cs 档生成的 .dll 档都可以运行。<br><br><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token class-name">Reflection_dll</span> redll <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Reflection_dll</span><span class="token punctuation">(</span><span class="token string">@"C:\WINDOWS\Microsoft.Net\assembly\GAC_32\mscorlib\v4.0_4.0.0.0__b77a5c561934e089\mscorlib.dll"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>redll<span class="token punctuation">.</span><span class="token function">Display</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></p><h3 id="结果输出"><a href="#结果输出" class="headerlink" title="结果输出"></a>结果输出</h3><pre class="line-numbers language-cmd" data-language="cmd"><code class="language-cmd">「mscorlib」共包含 3299 个项目，每 10 个为 1 页，分成 330 页「mscorlib」的第 1 页项目名如下：(1)「&lt;&gt;f__AnonymousType0&#96;1」类共有 7 个「成员」  共 5 个「方法」，列表如下：    -get_message    -Equals，需要 1 个参数        System.Object value    -GetHashCode    -ToString    -GetType  共 1 个「析构函数」，列表如下：    -.ctor  共 1 个「属性」，列表如下：    -message(2)「EmptyArray&#96;1」类共有 5 个「成员」  共 4 个「方法」，列表如下：    -Equals，需要 1 个参数        System.Object obj    -GetHashCode    -GetType    -ToString  共 1 个「字段」，列表如下：    -Value(3)「FXAssembly」类共有 4 个「成员」  共 4 个「方法」，列表如下：    -Equals，需要 1 个参数        System.Object obj    -GetHashCode    -GetType    -ToString(4)「ThisAssembly」类共有 4 个「成员」  共 4 个「方法」，列表如下：    -Equals，需要 1 个参数        System.Object obj    -GetHashCode    -GetType    -ToString(5)「AssemblyRef」类共有 4 个「成员」  共 4 个「方法」，列表如下：    -Equals，需要 1 个参数        System.Object obj    -GetHashCode    -GetType    -ToString(6)「Microsoft.Win32.IAssemblyEnum」类共有 3 个「成员」  共 3 个「方法」，列表如下：    -GetNextAssembly，需要 3 个参数        Microsoft.Win32.IApplicationContext&amp; ppAppCtx   Microsoft.Win32.IAssemblyName&amp; ppName   System.UInt32 dwFlags    -Reset    -Clone，需要 1 个参数        Microsoft.Win32.IAssemblyEnum&amp; ppEnum(7)「Microsoft.Win32.IApplicationContext」类共有 5 个「成员」  共 5 个「方法」，列表如下：    -SetContextNameObject，需要 1 个参数        Microsoft.Win32.IAssemblyName pName    -GetContextNameObject，需要 1 个参数        Microsoft.Win32.IAssemblyName&amp; ppName    -Set，需要 4 个参数        System.String szName    System.Int32 pvValue    System.UInt32 cbValue   System.UInt32 dwFlags    -Get，需要 4 个参数        System.String szName    System.Int32&amp; pvValue   System.UInt32&amp; pcbValue System.UInt32 dwFlags    -GetDynamicDirectory，需要 2 个参数        System.Int32&amp; wzDynamicDir      System.UInt32&amp; pdwSize(8)「Microsoft.Win32.IAssemblyName」类共有 9 个「成员」  共 9 个「方法」，列表如下：    -SetProperty，需要 3 个参数        System.UInt32 PropertyId        System.IntPtr pvProperty        System.UInt32 cbProperty    -GetProperty，需要 3 个参数        System.UInt32 PropertyId        System.IntPtr pvProperty        System.UInt32&amp; pcbProperty    -Finalize    -GetDisplayName，需要 3 个参数        System.IntPtr szDisplayName     System.UInt32&amp; pccDisplayName   System.UInt32 dwDisplayFlags    -BindToObject，需要 8 个参数        System.Object refIID    System.Object pAsmBindSink      Microsoft.Win32.IApplicationContext pApplicationContext System.String szCodeBase        System.Int64 llFlags    System.Int32 pvReserved System.UInt32 cbReserved        System.Int32&amp; ppv    -GetName，需要 2 个参数        System.UInt32&amp; lpcwBuffer       System.Int32&amp; pwzName    -GetVersion，需要 2 个参数        System.UInt32&amp; pdwVersionHi     System.UInt32&amp; pdwVersionLow    -IsEqual，需要 2 个参数        Microsoft.Win32.IAssemblyName pName     System.UInt32 dwCmpFlags    -Clone，需要 1 个参数        Microsoft.Win32.IAssemblyName&amp; pName(9)「Microsoft.Win32.ASM_CACHE」类共有 7 个「成员」  共 4 个「方法」，列表如下：    -Equals，需要 1 个参数        System.Object obj    -GetHashCode    -GetType    -ToString  共 3 个「字段」，列表如下：    -ZAP    -GAC    -DOWNLOAD(10)「Microsoft.Win32.CANOF」类共有 6 个「成员」  共 4 个「方法」，列表如下：    -Equals，需要 1 个参数        System.Object obj    -GetHashCode    -GetType    -ToString  共 2 个「字段」，列表如下：    -PARSE_DISPLAY_NAME    -SET_DEFAULT_VALUES<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> C# 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C# </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C# 笔记：Get 和 Set</title>
      <link href="2020/11/21/C-Get-and-Set/"/>
      <url>2020/11/21/C-Get-and-Set/</url>
      
        <content type="html"><![CDATA[<h2 id="简介："><a href="#简介：" class="headerlink" title="简介："></a>简介：</h2><p>　　顾名思义，是记录 Get 和 Set 用法的 C# 笔记~<br>　　Get 和 Set 在《C# 程序设计教程（第3版）》中位于「5.7 属性」一节。</p><h2 id="引用书中定义如下："><a href="#引用书中定义如下：" class="headerlink" title="引用书中定义如下："></a>引用书中定义如下：</h2><blockquote><c style="color: #07e4c9;">　　属性与字段相似，都是类成员，都有类型，可以被赋值和读取。属性提供了对类或对象成员的访问。通常情况下，将字段设置成私有的，设计一个对其进行读或写的属性。因此更充分地体现了对象的封装性。</c></blockquote><a id="more"></a><h2 id="语法格式为："><a href="#语法格式为：" class="headerlink" title="语法格式为："></a>语法格式为：</h2><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token comment">//public 可以换成 private 和 protected</span><span class="token keyword">public</span> <span class="token operator">&lt;</span>数据类型<span class="token operator">></span> <span class="token operator">&lt;</span>属性名称<span class="token operator">></span> <span class="token punctuation">&#123;</span>    <span class="token keyword">get</span>    <span class="token keyword">set</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="实例："><a href="#实例：" class="headerlink" title="实例："></a>实例：</h2><h3 id="HB-Time-cs："><a href="#HB-Time-cs：" class="headerlink" title="HB_Time.cs："></a><c style="color: red;">HB_Time.cs：</c></h3><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">using</span> <span class="token namespace">System</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">HB_Time</span> <span class="token punctuation">&#123;</span> <span class="token comment">//第5.7节 属性 Get 和 Set</span>    <span class="token comment">//核心数值，时分秒的赋值改变都会使其改变，时分秒的获取都要先获取它再处理。</span>    <span class="token comment">//它是个6位数，时占头2位，分占中间2位，秒占后2位。</span>    <span class="token keyword">private</span> <span class="token class-name"><span class="token keyword">int</span></span> time<span class="token punctuation">;</span>     <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">int</span></span> Seconds <span class="token punctuation">&#123;</span>        <span class="token keyword">get</span> <span class="token punctuation">&#123;</span> <span class="token keyword">return</span> time <span class="token operator">%</span> <span class="token number">100</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>        <span class="token keyword">set</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token keyword">value</span> <span class="token operator">></span> <span class="token number">59</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">value</span> <span class="token operator">-=</span> <span class="token number">60</span><span class="token punctuation">;</span>                time <span class="token operator">+=</span> <span class="token number">100</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            time <span class="token operator">-=</span> Seconds<span class="token punctuation">;</span>            time <span class="token operator">+=</span> <span class="token keyword">value</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>Minutes <span class="token operator">></span> <span class="token number">59</span><span class="token punctuation">)</span> time <span class="token operator">+=</span> <span class="token number">40</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">int</span></span> Minutes <span class="token punctuation">&#123;</span>        <span class="token keyword">get</span> <span class="token punctuation">&#123;</span> <span class="token keyword">return</span> time <span class="token operator">%</span> <span class="token number">10000</span> <span class="token operator">/</span> <span class="token number">100</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>        <span class="token keyword">set</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token keyword">value</span> <span class="token operator">></span> <span class="token number">59</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">value</span> <span class="token operator">-=</span> <span class="token number">60</span><span class="token punctuation">;</span>                time <span class="token operator">+=</span> <span class="token number">10000</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            time <span class="token operator">-=</span> Minutes <span class="token operator">*</span> <span class="token number">100</span><span class="token punctuation">;</span>            time <span class="token operator">+=</span> <span class="token keyword">value</span> <span class="token operator">*</span> <span class="token number">100</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>Minutes <span class="token operator">></span> <span class="token number">59</span><span class="token punctuation">)</span> time <span class="token operator">+=</span> <span class="token number">4000</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">int</span></span> Hours <span class="token punctuation">&#123;</span>        <span class="token keyword">get</span> <span class="token punctuation">&#123;</span> <span class="token keyword">return</span> time <span class="token operator">/</span> <span class="token number">10000</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>        <span class="token keyword">set</span> <span class="token punctuation">&#123;</span>            time <span class="token operator">-=</span> Hours <span class="token operator">*</span> <span class="token number">10000</span><span class="token punctuation">;</span>            time <span class="token operator">+=</span> <span class="token keyword">value</span> <span class="token operator">*</span> <span class="token number">10000</span><span class="token punctuation">;</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span>Hours <span class="token operator">></span> <span class="token number">23</span><span class="token punctuation">)</span> time <span class="token operator">-=</span> <span class="token number">240000</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Display</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token comment">//显示时间</span>        Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"时间为 [&#123;0&#125;:&#123;1&#125;:&#123;2&#125;]"</span><span class="token punctuation">,</span> Hours<span class="token punctuation">.</span><span class="token function">ToString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">PadLeft</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token string character">'0'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> Minutes<span class="token punctuation">.</span><span class="token function">ToString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">PadLeft</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token string character">'0'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> Seconds<span class="token punctuation">.</span><span class="token function">ToString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">PadLeft</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token string character">'0'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Program-cs："><a href="#Program-cs：" class="headerlink" title="Program.cs："></a><c style="color: red;">Program.cs：</c></h3><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token class-name">HB_Time</span> t <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">HB_Time</span> <span class="token punctuation">&#123;</span>    Seconds <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token comment">//系统直接调用 set 属性赋值</span>    Minutes <span class="token operator">=</span> <span class="token number">35</span><span class="token punctuation">,</span> <span class="token comment">//系统直接调用 set 属性赋值</span>    Hours <span class="token operator">=</span> <span class="token number">12</span> <span class="token comment">//系统直接调用 set 属性赋值</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>t<span class="token punctuation">.</span><span class="token function">Display</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//调用 Display() 方法显示时间</span><span class="token comment">//time的值为123501</span><span class="token comment">//输出：“时间为 [12:35:01]”</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> C# 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C# </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>如何让 Hexo 支持 LaTeX ？</title>
      <link href="2020/11/20/Supporting-LaTeX-in-Hexo/"/>
      <url>2020/11/20/Supporting-LaTeX-in-Hexo/</url>
      
        <content type="html"><![CDATA[<p>　　这是<c style="color: red;"><strong>教程！教程！教程！</strong></c> (重要的事情说三遍)<br>　　果然是随心的人，第一篇教程是 Hexo 的教程，一个刚刚才接触 Hexo 的菜*就敢在此<del>饶舌</del>教别人设置 Hexo ？<br><a id="more"></a></p><h2 id="第一步：把-hexo-renderer-marked-换成-hexo-renderer-kmarked-。"><a href="#第一步：把-hexo-renderer-marked-换成-hexo-renderer-kmarked-。" class="headerlink" title="第一步：把 hexo-renderer-marked 换成 hexo-renderer-kmarked 。"></a><c style="color: red;"><strong>第一步：</strong></c>把 <c style="color: brown;"><code>hexo-renderer-marked</code></c> 换成 <c style="color: brown;"><code>hexo-renderer-kmarked</code></c> 。</h2><p>　　打开 CMD ， cd 到你的博客文件夹，输入指令：<br>  <pre class="line-numbers language-none"><code class="language-none">npm unistall hexo-renderer-marked --savenpm istall hexo-renderer-kmarked --save<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><br>　　Kmarked 是 Marked 的进阶版，能够支持渲染 LaTeX 公式，就像 C++ 有 class 而 C 没有一样。</p><h2 id="第二步：把-hexo-math-换成-hexo-renderer-mathjax-。"><a href="#第二步：把-hexo-math-换成-hexo-renderer-mathjax-。" class="headerlink" title="第二步：把 hexo-math 换成 hexo-renderer-mathjax 。"></a><c style="color: red;"><strong>第二步：</strong></c>把 <c style="color: brown;"><code>hexo-math</code></c> 换成 <c style="color: brown;"><code>hexo-renderer-mathjax</code></c> 。</h2><p>　　输入指令：<br>  <pre class="line-numbers language-none"><code class="language-none">npm unistall hexo-math --savenpm istall hexo-renderer-mathjax --save<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><br>　　作用同上。</p><h2 id="第三步：更改文件配置"><a href="#第三步：更改文件配置" class="headerlink" title="第三步：更改文件配置"></a><c style="color: red;"><strong>第三步：</strong></c>更改文件配置</h2><p>　　1. 打开 <c style="color: brown;"><code>/node_modules/hexo-renderer-kramed/lib/renderer.js</code></c>：<br><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">//把第65行开始的函数段改成这样：</span><span class="token keyword">function</span> <span class="token function">formatText</span><span class="token punctuation">(</span><span class="token parameter">text</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> text<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></p><p>　　2. 打开 <c style="color: brown;"><code>/node_modules/hexo-renderer-mathjax/mathjax.html</code></c>：<br><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml">//把第15行改成这样：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.1/MathJax.js?config=TeX-MML-AM_CHTML<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></p><p>　　3. 打开 <c style="color: brown;"><code>/node_modules/kramed/lib/rules/inline.js</code></c>：<br><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">//把第11行改成这样：</span>escape<span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^\\([`*\[\]()# +\-.!_>])</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span><span class="token comment">//把第20行改成这样：</span>em<span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^\*((?:\*\*|[\s\S])+?)\*(?!\*)</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></p><h2 id="第四步：开启-MathJax"><a href="#第四步：开启-MathJax" class="headerlink" title="第四步：开启 MathJax"></a><c style="color: red;"><strong>第四步：</strong></c>开启 MathJax</h2><p>　　在<c style="color: brown;"><code>config.yml</code></c>里加上：<br><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">mathjax</span><span class="token punctuation">:</span>    <span class="token key atrule">enable</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>//或者<span class="token key atrule">mathjax</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>//冒号后面都要空格哦<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></p><h2 id="第五步：开始使用-LaTeX-！"><a href="#第五步：开始使用-LaTeX-！" class="headerlink" title="第五步：开始使用 LaTeX ！"></a><c style="color: red;"><strong>第五步：</strong></c>开始使用 LaTeX ！</h2><p>　　以上都完成了之后，就可以在 Hexo 博客文章里插入 LaTeX 了！<br>　　<c style="color: red;"><strong>用法：</strong></c> <code>$ &lt;LaTeX 公式&gt; $</code> (多行则要两个$号)<br>　　猜猜这公式是什么？（滑稽）</p><script type="math/tex; mode=display">x^{2}+(y-\sqrt[3]{x^{2}})^{2}=1</script>]]></content>
      
      
      <categories>
          
          <category> Hexo 教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
            <tag> LaTeX </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>printf(&quot;Hello World!&quot;);</title>
      <link href="2020/11/20/printf-hello-world/"/>
      <url>2020/11/20/printf-hello-world/</url>
      
        <content type="html"><![CDATA[<p>　　今天 (2020-11-20) 在C#课堂上看到 Linyx 打开了他的 Blog 网站。我顿时产生了兴趣，便向他请教，<del>以完全白嫖的方式</del>制作并开启了我自己的 Blog 网站。教学链接：<a href="https://linyx.tk/categories/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E7%9A%84%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/">Linyx’s Home</a><br>　　原本我以为<a href="https://hbpencil.ga/">hbpencil.ga</a>这个域名很热门，结果上<a href="http://www.freenom.com/zh/index.html">Freenom官网</a>一查，是我想多了，五大免费顶级域名 <c style="color: red;">.tk .ml .ga .cf .gq</c> 都没人注册（笑哭）。<br><a id="more"></a><br><img src="/2020/11/20/printf-hello-world/1.png" class="" title="图1"></p><p>　　hbpencil的hb是「好比 Háo Bǐ」的声母，pencil就顺着加上去。ga是取「家」的粤语拼音gaa1，一是表示这网站将是我文章的家，二是我名字里有「家」字和表示我是一个香港人，所以你会看到我的网站标题是「家志嘅家」。<br>　　这个网站刚刚才建起来，还没个性化，可能会自己弄一个主题，以后我就用这个网站来放笔记、教程、计划之类的了。</p>]]></content>
      
      
      
    </entry>
    
    
  
  
    
  
</search>
